Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-10-07T09:41:32-05:00

====== Basic Python ======
Created Monday 07 October 2013

===== Variables, expressions and statements =====
A **variable** is a name that refers to a value.
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.1415926535897932

**keywords**:
and		del		from		not		while		as		elif		global		or		with		assert		else		if		pass		yield		break		except		import			print		class		exec		in		raise		continue		finally		is		return		def			for		lambda		try		nonlocal

**Operators** are special symbols that represent computations: 
	''+, -, *, /, **, %, ==, !=, <=, and, or, not''
	Bitwise operators: http://wiki.python.org/moin/BitwiseOperators.
	// performs floor division.

**Printing**
>>> print 1 **,**
>>> print 1
>>> #Comment

**Import**
>>> import math
>>> print math.pi
>>> from math import pi
>>> print pi

==== Types ====
http://docs.python.org/2/library/stdtypes.html#numeric-types-int-float-long-complex
Python has multiple assigment and casts semi-authomatically
**Casting**
>>> type()
>>> int('32')
>>> float(32)
>>> a=8
>>> a/5
>>> a/5.0
>>> str(32)
>>> a = 'blable' #can be navigated like arrays
>>> a[0]
>>> a[-1]
>>> list(a)
>>> set(a)


===== Functions =====
A function is a named sequence of statements that performs a computation
Format is called dot notation.
Possible to do function: nesting, recursion, composition

'''
if x < y:
    print x
elif x > y:
    print y
else:
    pass
'''


'''
while n > 0:
    print n
    if n == 0: break 
'''
''# stop condition''
''    n = n-1 ''''# counter / stop condition''

'''
for char in word: #no count needed!
    print char
'''


**Defining** new functions
'''
def function_name (argument=default_value, ):
'''
	'''
	#indent carefully
	temp = argument #local
	print argument
	return temp
	'''
When you create a variable inside a function, it is **local**, which means that it only exists inside the function.

exec() and eval()


===== Strings =====
http://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange
strings are immutable
"" ''+ "" '': concatenation
"" * n: repetition
>>> a = "blable"
>>> a[0]
>>> a[-1]
>>> a[1:3] # slice
>>> a[:3]
>>> len(a)
>>> min(s)
>>> max(s)
>>> s.index(i)	# index of the first occurrence of i in s	 
>>> s.count(i)	# total number of occurrences of i in s
>>> word.find('la')
	-1 if fail to find
>>> 'a' in a

===== List =====
http://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange
>>> lists = [[]] * 3
>>> lists
>>> lists[0].append(3)
>>> lists
s.append(x)	same as s[len(s):len(s)] = [x]	(2)
s.insert(i, x)	same as s[i:i] = [x]	(5)
s.pop([i])	same as x = s[i]; del s[i]; return x	(6)
s.remove(x)	same as del s[s.index(x)]	(4)
s.reverse()	reverses the items of s in place	(7)
s.sort([cmp[, key[, reverse]]])	sort the items of s in place	(7)(8)(9)(10)
A **set** object is an unordered collection of distinct hashable objects. 
len, in, | (union), & (intersection), - (difference), add, remove, pop, clear

===== Dictionary and tuple =====
 a **dictionary** as a mapping between a set of indices (which are called keys) and a set of values. Each key maps to a value. The association of a key and a value is called a **key-value** pair or sometimes an item.
there might be more than one key that maps to the value v
A **hash** is a function that takes a value (of any kind) and returns an integer. Dictionaries use these integers, called hash values, to store and look up key-value pairs.
>>> eng2sp = dict()
>>> eng2sp['one'] = 'uno'
>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}
values(), which returns the values as a list
'''
def print_hist(h):
    for c in h:
        print c, h[c]
'''

A **tuple** is a sequence of values. The values can be any type, and they are indexed by integers, so in that respect tuples are a lot like lists. The important difference is that tuples are immutable.
>>> t = 'a', 'b', 'c', 'd', 'e'
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> a, b = b, a 	#interchange without need of temp
return a, b #return multiple values

Dictionaries have a method called items that returns a list of tuples, where each tuple is a key-value pair.
>>> d = {'a':0, 'b':1, 'c':2}
>>> t = d.items()
Going in the other direction, you can use a list of tuples to initialize a new dictionary:
>>> t = [('a', 0), ('c', 2), ('b', 1)]
>>> d = dict(t)

===== Input =====
>>> text = raw_input()
>>> print text
